import { Scenes } from 'telegraf';
import { IContext } from '../context/context.interface';
import { Message } from 'telegraf/typings/core/types/typegram';
import { PlacesService } from '../../services/places.service';
import { ApiError } from '../../errors/error.class';
import {
  categoriesOfPlacesKeyboard,
  closePlacesScene,
  repeatPlacesScene,
} from '../keyboards/places.keyboard';
import { IPlaceData, IPlaceInformationDataAPI } from '../../types/place.type';
import { CategoriesOfPlacesCommands } from '../../constants/categoriesOfPlaces';
import { ICoordinates } from '../../types/coordinates.interface';

const service = new PlacesService();

let savedCityCoordinates: ICoordinates;

async function sendPlaces(ctx: IContext, places: IPlaceData[]): Promise<void> {
  for (const place of places) {
    const placeInformation: IPlaceInformationDataAPI =
      await service.getInformationAboutPlace(place.properties.xid);

    const address: string =
      placeInformation?.address?.road && placeInformation?.address?.house_number
        ? `üó∫Ô∏è–ê–¥—Ä–µ—Å: ${placeInformation.address.road}, ${placeInformation.address.house_number}`
        : '';

    const message = `‚û°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: ${placeInformation.name} ‚¨ÖÔ∏è
${address}`;

    await ctx.sendMessage(message);
  }
}
async function sendChooseCategoryOfPlaces(ctx: IContext) {
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç:', categoriesOfPlacesKeyboard);
  ctx.wizard.selectStep(2);
  return;
}
async function sendCInputCityName(ctx: IContext) {
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:');
  await ctx.wizard.selectStep(1);
  return;
}

export const PlacesScene = new Scenes.WizardScene<IContext>(
  'PLACES_SCENE',

  async (ctx: IContext) => {
    ctx.reply(
      `–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üó∫Ô∏è:`,
    );
    ctx.wizard.next();
  },

  async (ctx: IContext) => {
    const cityName: string | undefined = (ctx.message as Message.TextMessage)
      ?.text;

    if (!cityName) {
      await ctx.replyWithHTML('<b>–í—ã –æ—Ç–ø—Ä–∞–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚ùó</b>');
      await sendCInputCityName(ctx);
      return;
    }

    try {
      savedCityCoordinates = await service.getCoordinatesByCityName(cityName);

      await sendChooseCategoryOfPlaces(ctx);
      return;
    } catch (error) {
      if (error instanceof ApiError && error.name === 'NOT_FOUND') {
        await ctx.replyWithHTML(
          '<b>–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π‚ùó</b>',
        );
        await sendCInputCityName(ctx);
        return;
      }

      await ctx.replyWithHTML(
        '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ùó</b>',
        closePlacesScene,
      );
      return;
    }
  },

  async (ctx: IContext) => {
    const placeCategory: string | undefined = (
      ctx.message as Message.TextMessage
    )?.text;

    if (!placeCategory) {
      await sendChooseCategoryOfPlaces(ctx);
      return;
    }

    if (placeCategory in CategoriesOfPlacesCommands) {
      const places: IPlaceData[] = await service.getPlacesByCoordinates(
        savedCityCoordinates,
        CategoriesOfPlacesCommands[placeCategory],
      );

      await sendPlaces(ctx, places);
    }

    ctx.sendMessage('–ì–æ—Ç–æ–≤–æ!', repeatPlacesScene);
    ctx.wizard.next();

    return;
  },
);

PlacesScene.hears('–ó–∞–∫—Ä—ã—Ç—å‚ùå', async (ctx: IContext) => {
  await ctx.scene.leave();
  return;
});

PlacesScene.hears('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥‚Ü©Ô∏è', async (ctx: IContext) => {
  await sendCInputCityName(ctx);
  await ctx.wizard.selectStep(1);
  return;
});

PlacesScene.hears('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é‚Ü©Ô∏è', async (ctx: IContext) => {
  await sendChooseCategoryOfPlaces(ctx);
  await ctx.wizard.selectStep(2);
  return;
});
