import { Scenes } from 'telegraf';
import { IContext } from '../context/context.interface';
import { Message } from 'telegraf/typings/core/types/typegram';
import { CityCoordinates } from '../../services/places.service';
import { PlacesService } from '../../services/places.service';
import { IPlaceData, IPlaceInformationDataAPI } from '../../types/place.type';

const service = new PlacesService();

async function sendPlaces(ctx: IContext, places: IPlaceData[]): Promise<void> {
  for (const place of places) {
    const placeInformation: IPlaceInformationDataAPI =
      await service.getInformationAboutPlace(place.properties.xid);

    const address: string =
      placeInformation?.address?.road && placeInformation?.address?.house_number
        ? `üó∫Ô∏è–ê–¥—Ä–µ—Å: ${placeInformation.address.road}, ${placeInformation.address.house_number}`
        : '';

    const message = `‚û°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: ${placeInformation.name} ‚¨ÖÔ∏è
${address}

–ì–ï–û–ü–û–ó–ò–¶–ò–Ø –î–ê–ù–ù–û–ì–û –ú–ï–°–¢–ê
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è`;

    
    await ctx.reply(message);

    await ctx.replyWithLocation(
      placeInformation.point.lat,
      placeInformation.point.lon,
    );
  }
}

export const PlacesScene = new Scenes.WizardScene<IContext>(
  'PLACES_SCENE',

  async (ctx: IContext) => {
    ctx.reply(
      `–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.üó∫Ô∏è`,
    );
    ctx.wizard.next();
    return;
  },

  async (ctx: IContext) => {
    const cityName: string | undefined = (ctx.message as Message.TextMessage)
      ?.text;
    const sentCityCoordinates: CityCoordinates | undefined = (
      ctx.message as Message.LocationMessage
    )?.location;

    if (!sentCityCoordinates && !cityName) {
      ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.',
      );
      ctx.wizard.selectStep(1);
      return;
    }

    if (sentCityCoordinates) {
      sendPlaces(
        ctx,
        await service.getPlacesByCoordinates(sentCityCoordinates),
      );
      ctx.scene.leave();
      return;
    }

    const cityCoordinates: CityCoordinates =
      await service.getGeopositionByCityName(cityName);
    sendPlaces(ctx, await service.getPlacesByCoordinates(cityCoordinates));

    ctx.scene.leave();
    return;
  },
);
