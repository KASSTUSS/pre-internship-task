import { Scenes } from 'telegraf';
import { IContext } from '../context/context.interface';
import { Message } from 'telegraf/typings/core/types/typegram';
import { PlacesService } from '../../services/places.service';
import { WeatherService } from '../../services/weather.service';
import { IWetherDataAPI } from '../../types/weather.type';
import { ICoordinates } from '../../types/coordinates.interface';
import { ApiError } from '../../errors/error.class';
import {
  closeWetherScene,
  repeatWeatherScene,
} from '../keyboards/weather.keyboard';

const servicePlaces = new PlacesService();
const serviceWeather = new WeatherService();

let cityCoordinates: ICoordinates;

async function sendCInputCityName(ctx: IContext) {
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:');
  await ctx.wizard.selectStep(1);
  return;
}

export const WeatherScene = new Scenes.WizardScene<IContext>(
  'WEATHER_SCENE',

  async (ctx: IContext) => {
    ctx.replyWithHTML(
      `<b>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞üó∫Ô∏è:</b>`,
    );
    ctx.wizard.next();
    return;
  },

  async (ctx: IContext) => {
    const cityName: string | undefined = (ctx.message as Message.TextMessage)
      ?.text;

    if (!cityName) {
      sendCInputCityName(ctx);
      return;
    }

    try {
      cityCoordinates = await servicePlaces.getCoordinatesByCityName(cityName);
      const weatherData: IWetherDataAPI =
        await serviceWeather.getWeatherInformation(cityCoordinates);

      const message: string = `–ü–æ–≥–æ–¥–∞ –≤ ${weatherData.location.name}(${weatherData.location.region}, ${weatherData.location.country})
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.current.temp_c} ¬∞C
–í–µ—Ç–µ—Ä: ${weatherData.current.wind_mph} –º/—Å
–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weatherData.current.humidity}%
--------------------------------------
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${weatherData.current.last_updated}`;

      await ctx.replyWithPhoto(
        { url: 'https://' + weatherData.current.condition.icon.slice(2) },
        { caption: message, reply_markup: repeatWeatherScene },
      );

      ctx.wizard.next();
      return;
    } catch (error) {
      if (error instanceof ApiError && error.name === 'NOT_FOUND') {
        await ctx.replyWithHTML(
          '<b>–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π‚ùó</b>',
        );
        await sendCInputCityName(ctx);
        return;
      }

      await ctx.replyWithHTML(
        '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ‚ùó</b>',
        closeWetherScene,
      );
      return;
    }
  },
);

WeatherScene.hears('–ó–∞–∫—Ä—ã—Ç—å‚ùå', async (ctx: IContext) => {
  await ctx.scene.leave();
  return;
});

WeatherScene.hears('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥‚Ü©Ô∏è', async (ctx: IContext) => {
  await sendCInputCityName(ctx);
  await ctx.wizard.selectStep(1);
  return;
});
